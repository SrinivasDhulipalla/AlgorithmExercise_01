/* 140. Word Brea II
input : s, wordDict
        add spaces in s to construct a sentence where each word is in wordDict
output: list of sentences
 * Thought Process:
Can I use DP?
It is directed acyclic graph, we can try DP.
The problem is to get a list of valid sentences generated by adding spaces in s[0, slen-1]
If we define STATE dp[i] as get a list of valid sentences generated by adding spaces in s[0, i-1], 0 <= i <= slen
The AIM STATE is dp[slen]
STATE TRANSFER as below :
    standing at dp[i], we get a list,
        dp (MENTOR: It's hard to induce, right? LET'S TRY BACKTRACKING)
leetcode
l eetcode
le etcode
lee tcode
leet code
    if (wordDict.contains(s.substring(curPos, spacePos)))
 * 
 */
package DynamicProgramming;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

/**
 *
 * @author xinrong
 */
public class WordBreakII {

    public List<String> wordBreak(String s, List<String> wordDict) {
        List<List<String>> resultList = new ArrayList<>();
        wordBreakFrom(s, new HashSet<>(wordDict), 0, new ArrayList<>(), resultList);
        List<String> result = new ArrayList<>();
        for (List<String> res : resultList) {
            StringBuilder sb = new StringBuilder();
            for (String str : res) {
                sb.append(str);
            }
            result.add(sb.toString());
        }
        return result;
    }

    private void wordBreakFrom(String s, HashSet<String> wordDict, int curPos, List<String> curList, List<List<String>> allList) {
        if (curPos == s.length()) {
            allList.add(new ArrayList<>(curList));
            return;
        }
        for (int spacePos = curPos + 1; spacePos < s.length(); spacePos++) {
            if (wordDict.contains(s.substring(curPos, spacePos))) {
                curList.add(s.substring(curPos, spacePos));
                wordBreakFrom(s, wordDict, spacePos, curList, allList);
                curList.remove(curList.size() - 1);
            }
        }
    }
}
